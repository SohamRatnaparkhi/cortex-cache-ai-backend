generator client {
    provider  = "prisma-client-py"
    interface = "asyncio"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Conversation {
    id        String             @id @default(uuid())
    title     String?
    createdAt DateTime           @default(now())
    updatedAt DateTime           @default(now()) @updatedAt
    userId    String
    summary   String?
    memoryIds String[]
    status    ConversationStatus @default(ACTIVE)
    user      User               @relation(fields: [userId], references: [id])
    messages  Message[]

    @@index([userId, updatedAt])
}

model Message {
    id             String       @id @default(uuid())
    content        String       @db.Text
    sender         String
    createdAt      DateTime     @default(now())
    conversationId String
    memoryId       String[]     @default([])
    chunkIds       String[]     @default([])
    questionId     String?
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@index([conversationId, createdAt])
}

model Memory {
    memId     String
    chunkId   String
    title     String
    memType   String
    memData   String
    source    String?
    tags      String[]
    metadata  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    mindMapId String?
    userId    String
    mindMap   MindMap? @relation(fields: [mindMapId], references: [id])
    User      User     @relation(fields: [userId], references: [id])

    @@id([memId, chunkId])
    @@index([memType])
    @@index([tags])
}

model MindMap {
    id          String          @id @default(uuid())
    title       String
    description String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    memories    Memory[]
    sharedWith  SharedMindMap[]
}

model User {
    id                 String          @id @default(uuid())
    name               String
    email              String          @unique
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    accountType        AccountType     @default(FREE)
    currentBalance     Int             @default(0)
    totalUsedTokens    Int             @default(0)
    apiKeys            ApiKeys[]
    conversations      Conversation[]
    Memory             Memory[]
    sharedMemoriesFrom SharedMemory[]  @relation("SharedMemoryFrom")
    sharedMemoriesTo   SharedMemory[]  @relation("SharedMemoryTo")
    sharedMindMapsFrom SharedMindMap[] @relation("SharedMindMapFrom")
    sharedMindMapsTo   SharedMindMap[] @relation("SharedMindMapTo")
}

model ApiKeys {
    id        String   @id @default(uuid())
    userId    String
    apiKey    String   @unique
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    isPrimary Boolean  @default(false)

    @@unique([userId, apiKey])
}

model SharedMemory {
    id         String     @id @default(uuid())
    fromUserId String
    toUserId   String
    memoryId   String
    permission Permission
    createdAt  DateTime   @default(now())
    fromUser   User       @relation("SharedMemoryFrom", fields: [fromUserId], references: [id])
    toUser     User       @relation("SharedMemoryTo", fields: [toUserId], references: [id])

    @@unique([fromUserId, toUserId, memoryId])
}

model SharedMindMap {
    id         String     @id @default(uuid())
    fromUserId String
    toUserId   String
    mindMapId  String
    permission Permission
    createdAt  DateTime   @default(now())
    fromUser   User       @relation("SharedMindMapFrom", fields: [fromUserId], references: [id])
    mindMap    MindMap    @relation(fields: [mindMapId], references: [id])
    toUser     User       @relation("SharedMindMapTo", fields: [toUserId], references: [id])

    @@unique([fromUserId, toUserId, mindMapId])
}

model memory_search_vector {
    memid         String
    chunkid       String
    search_vector Unsupported("tsvector")?

    @@id([memid, chunkid])
}

enum AccountType {
    FREE
    PREMIUM
    ENTERPRISE
}

enum ConversationStatus {
    ACTIVE
    ARCHIVED
    DELETED
}

enum Permission {
    VIEW
    EDIT
}
